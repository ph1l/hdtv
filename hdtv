#!/usr/bin/env python2.7

"""
  hdtv
  ----
  command line utility to use the HDHomeRun device from the shell

  Copyright 2015 Philip J Freeman <elektron@halo.nu>
  ---------------------------------------------------------------------
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  ---------------------------------------------------------------------
"""

import getopt
import os, os.path
import re
import socket
import sys
import time
import ConfigParser
from distutils.version import StrictVersion

CONFIG_DIR="%s/.hdtv" % (os.getenv("HOME", default="."))
LOCAL_PORT=1234


class HdhrException(Exception):
    """
    """
    pass


class Hdhr(object):
    """
    """
    HDHR_CFG_CMD="/usr/bin/hdhomerun_config"

    def HdhrCMD(self, cmdstr):
        cmd = "%s %s"%(self.HDHR_CFG_CMD, cmdstr)
        print "DEBUG: HdhrCMD=\"%s\""%(cmdstr)
        if os.system(cmd) != 0:
            raise HdhrException("ERROR: %s"%(cmd))
        return None

    def HdhrGet(self, key):
        #TODO: should return the text from the command
        cmd = "%s %s get %s"%(self.HDHR_CFG_CMD, self.device_id, key)
        if os.system(cmd) != 0:
            raise HdhrException("ERROR: %s"%(cmd))
        return None

    def HdhrSet(self, key, value):
        cmd = "%s %s set %s %s"%(
                self.HDHR_CFG_CMD,
                self.getDeviceId(),
                key, value,
            )
        if os.system(cmd) != 0:
            raise HdhrException("ERROR: %s"%(cmd))
        return None


class Device(Hdhr):
    """
    """

    def __init__(self, device_id=None):
        if not os.path.exists(CONFIG_DIR):
            os.mkdir(CONFIG_DIR)
        if device_id == None:
            device_id=self.__getDefaultDevice()
        self.device_id = device_id
        self.tuner = None

    def __str__(self):
        return "Device %s"%(self.device_id)

    def __getDefaultDevice(self):
        #TODO: This should return a device id from discover
        self.HdhrCMD("discover")
        return "10176195"

    def getDeviceId(self):
        return self.device_id

    def selectTuner(self, tuner_id):
        self.tuner = Tuner(self, tuner_id)
        return self.tuner


class Tuner(Hdhr):
    """
    """

    def __init__(self, device, tuner_number):
        self.device = device
        self.tuner_id=tuner_number
        self.channel_list=[]
        self.__tuner_cache_file="%s/%s.t%d.cache"%(
                                    CONFIG_DIR,
                                    self.device.device_id,
                                    self.tuner_id
                                )
        if not os.path.exists(self.__tuner_cache_file):
            print "building channel scan cache (%s)..."%(
                    self.__tuner_cache_file)
            #TODO: the following returns non-zero exit code...
            self.HdhrCMD("%s scan /tuner%d %s"%(
                            self.device.device_id,
                            self.tuner_id,
                            self.__tuner_cache_file
                        ))
        #Load Channel info from Cache
        re_channel=re.compile("^SCANNING: [0-9]+ \(.*:([0-9]+)\)$")
        re_lock=re.compile("^LOCK: ([^ ]+) \(.*\)$")
        re_program=re.compile("^PROGRAM ([0-9]+): ([0-9]+\.[0-9]+) (.*)$")
        channel_number=0
        channel=None
        with open(self.__tuner_cache_file) as f:
            for l in f.readlines():
                m = re_channel.match(l)
                if m:
                    channel_number = int(m.group(1))
                    continue

                m = re_lock.match(l)
                if m:
                    lock = m.group(1)
                    if lock != "none":
                        channel=Channel(self, channel_number)
                        self.channel_list.append(channel)

                m = re_program.match(l)
                if m:
                    program_number = int(m.group(1))
                    display_channel = m.group(2)
                    program_description = m.group(3)
                    channel.addProgram(program_number,display_channel,program_description)

    def __str__(self):
        return "Tuner %d"%(self.number)

    def getDeviceId(self):
        return self.device.device_id

    def getChannels(self):
        return self.channel_list

    def setTarget(self, host, port):
        self.HdhrSet("/tuner%d/target"%(self.tuner_id), "%s:%s"%(host, port))


class Channel(Hdhr):
    """
    """

    def __init__(self, tuner, channel_number):
        self.tuner=tuner
        self.number=int(channel_number)
        self.program_list=[]

    def __str__(self):
        return "Channel %d"%(self.number)

    def getDeviceId(self):
        return self.tuner.device.device_id

    def addProgram(self, program_number, display_channel, description):
        self.program_list.append(Program(self, program_number, display_channel, description))

    def getPrograms(self):
        return self.program_list

    def setChannel(self):
        self.HdhrSet("/tuner%d/channel"%(self.tuner.tuner_id),self.number)


class Program(Hdhr):
    """
    """

    def __init__(self, channel, program_number, display_channel, description):
        self.channel=channel
        self.number=program_number
        self.display_channel=display_channel
        self.description=description

    def __str__(self):
        return "Program %d: %s"%(self.number,self.description)

    def getDeviceId(self):
        return self.channel.tuner.device.device_id

    def setProgram(self):
        self.channel.setChannel()
        self.HdhrSet(
                "/tuner%d/program"%( self.channel.tuner.tuner_id),
                self.number )


def main():

    try:
        opts, args = getopt.getopt(
                        sys.argv[1:],
                        "hd:t:v",
                        ["help", "device=", "tuner=", "verbose"]
                    )

    except getopt.GetoptError as err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    device_id = None
    tuner_id = 0
    verbose = False

    config = ConfigParser.ConfigParser()
    config.read(os.path.expanduser('~/.hdtv/config'))
    try:
        device_id = config.get('device','id')
    except:
        pass

    for o, a in opts:
        if o == "-v":
            verbose = True
        elif o in ("-d", "--device"):
            device_id = a
        elif o in ("-t", "--tuner"):
            tuner_id = int(a)
        else:
            assert False, "unhandled option"

    if args[0] == "help":
        usage()
        sys.exit()

    d = Device(device_id)
    t = d.selectTuner(tuner_id)

    if args[0] == "list":
        channels = get_display_channel_dict(t)
        for channel_name in sorted(channels.keys(), key=StrictVersion):
            print "%s: %s"%(channel_name, channels[channel_name].description)

    if args[0] == "view":
        m = re.compile("^([0-9]+\.[0-9]+)$").match(args[1])
        if m:
            channel = m.group(1)
        else:
            assert False, "couldn't parse channel"
        for c in t.getChannels():
            for p in c.getPrograms():
                if p.display_channel == channel:
                    local_display()
                    time.sleep(2)
                    p.setProgram()
                    t.setTarget(get_local_ip(), LOCAL_PORT)

def get_display_channel_dict(tuner):
    l={}
    for c in tuner.getChannels():
        for p in c.getPrograms():
            l[p.display_channel] = p
    return l


def local_display():
        cmd = "vlc udp://@:%s &"%(LOCAL_PORT)
        if os.system(cmd) != 0:
                print "ERROR: %s"%(cmd)

def get_local_ip():
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

        try:
            s.connect(("8.8.8.8", 9))
            client = s.getsockname()[0]
        except socket.error:
            client = "Unknown IP"
        finally:
            del s
        print "DEBUG: Got Local IP = %s"%(client)
        return client

def usage():
    print """
hdtv [ OPTIONS ] <COMMAND>

OPTIONS

    --device <ID>     tuner number (DEFAULT: %(DEFAULT_DEVICE_ID)s)

    --tuner <N>     tuner number (DEFAULT: 0)

COMMANDS

    help            this cruft

    list            list available channels

    view <CHANNEL>  play channel

""" % {
        "DEFAULT_DEVICE_ID": '',
    }

if __name__ == "__main__":
    main()

#
# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
